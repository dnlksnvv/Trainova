services:
  postgres:
    image: postgres:16
    container_name: trainova_postgres
    env_file: 
      - ./.env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=md5
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    command: ["postgres", "-c", "listen_addresses=*", "-c", "log_statement=all"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    

  
  auth_service:
    build:
      context: ../backend/auth_service
      dockerfile: Dockerfile
    container_name: trainova_auth_service
    env_file:
      - ./.env
    ports:
      - "8000:8000"
    environment:
      - CONFIG_FILE=/.env
      - DB_HOST=postgres
    volumes:
      - ./.env:/.env
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  workout_service:
    build:
      context: ../backend/workout_service
      dockerfile: Dockerfile
    container_name: trainova_workout_service
    env_file:
      - ./.env
    ports:
      - "8001:8001"
    environment:
      - CONFIG_FILE=/.env
      - DB_HOST=postgres
    volumes:
      - ./.env:/.env
      - exercises_content_data:/app/exercises_content
    restart: unless-stopped
    depends_on:
      auth_service:
        condition: service_started
      postgres:
        condition: service_healthy


  profile_service:
    build:
      context: ../backend/profile_service
      dockerfile: Dockerfile
    container_name: trainova_profile_service
    env_file:
      - ./.env
    ports:
      - "8030:8030"
    environment:
      - CONFIG_FILE=/.env
      - DB_HOST=postgres
    volumes:
      - ./.env:/.env
      - profile_avatars_data:/app/uploads
    restart: unless-stopped
    depends_on:
      auth_service:
        condition: service_started
      postgres:
        condition: service_healthy

  course_service:
    build:
      context: ../backend/course_service
      dockerfile: Dockerfile
    container_name: trainova_course_service
    env_file:
      - ./.env
    ports:
      - "8006:8006"
    environment:
      - CONFIG_FILE=/.env
      - DB_HOST=postgres
    volumes:
      - ./.env:/.env
    restart: unless-stopped
    depends_on:
      auth_service:
        condition: service_started
      postgres:
        condition: service_healthy

  motivation_service:
    build:
      context: ../backend/motivation_service
      dockerfile: Dockerfile
    container_name: trainova_motivation_service
    env_file:
      - ./.env
    ports:
      - "8008:8008"
    environment:
      - CONFIG_FILE=/.env
      - DB_HOST=postgres
    volumes:
      - ./.env:/.env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    depends_on:
      auth_service:
        condition: service_started
      postgres:
        condition: service_healthy

  comment_service:
    build:
      context: ../backend/comment_service
      dockerfile: Dockerfile
    container_name: trainova_comment_service
    env_file:
      - ./.env
    ports:
      - "8009:8009"
    environment:
      - CONFIG_FILE=/.env
      - DB_HOST=postgres
    volumes:
      - ./.env:/.env
    restart: unless-stopped
    depends_on:
      auth_service:
        condition: service_started
      postgres:
        condition: service_healthy
  
  nginx:
    image: nginx:1.25
    container_name: trainova_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/conf.d:/etc/nginx/conf.d
      - /certs:/etc/letsencrypt
      - /www:/var/www/html
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: >
      /bin/sh -c "while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g 'daemon off;'"
    depends_on:
      - auth_service
      - workout_service

volumes:
  postgres_data:
    external: true
    name: docker_postgres_data
  exercises_content_data:
    external: true  
    name: docker_exercises_content_data
  profile_avatars_data:
    external: true
    name: docker_profile_avatars_data
  certbot_www:
    external: true
    name: docker_certbot_www
  certbot_conf:
    external: true
    name: docker_certbot_conf

networks:
  default:
    name: trainova_network
    driver: bridge
