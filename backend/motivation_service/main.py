from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.utils import get_openapi
import logging
import sys
import jwt
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import Response
import asyncio
from datetime import datetime, timezone

from motivation.infrastructure.database import Database
from motivation.infrastructure.repository import MotivationRepository
from motivation.application.services.motivation_service import MotivationService
from motivation.api.router import MotivationRouter
from background_worker import MotivationWorker
from config import settings

logging.basicConfig(
    level=logging.INFO if settings.DEBUG else logging.WARNING,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
database = None
motivation_service = None
background_worker = None
worker_task = None

class AuthMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        start_time_utc = datetime.now(timezone.utc)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º health check –∏ docs
        if request.url.path in ["/health", "/docs", "/openapi.json"]:
            response = await call_next(request)
            return response
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
        auth_header = request.headers.get("Authorization")
        
        if not auth_header or not auth_header.startswith("Bearer "):
            logger.warning(f"üîí –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {request.url.path} (UTC: {start_time_utc})")
            return JSONResponse(
                status_code=401,
                content={"detail": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"}
            )
        
        token = auth_header.replace("Bearer ", "")
        
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
            payload = jwt.decode(token, options={"verify_signature": False})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            request.state.user = {
                "user_id": payload.get("user_id"),
                "email": payload.get("email")
            }
            
            auth_time_utc = datetime.now(timezone.utc)
            logger.debug(f"üîì –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è user_id={payload.get('user_id')} (UTC: {auth_time_utc})")
            
        except jwt.InvalidTokenError as e:
            error_time_utc = datetime.now(timezone.utc)
            logger.warning(f"üîí –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è {request.url.path} (UTC: {error_time_utc}): {str(e)}")
            return JSONResponse(
                status_code=401,
                content={"detail": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"}
            )
        
        response = await call_next(request)
        return response

def create_application() -> FastAPI:
    application = FastAPI(
        title="Motivation Service",
        description="–°–µ—Ä–≤–∏—Å –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        version="1.0.0"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    application.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    application.add_middleware(AuthMiddleware)
    
    return application

app = create_application()

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    current_time_utc = datetime.now(timezone.utc)
    return {
        "status": "healthy", 
        "service": "motivation_service",
        "timestamp_utc": current_time_utc.isoformat()
    }

@app.on_event("startup")
async def startup_event():
    global database, motivation_service, background_worker, worker_task
    
    start_time_utc = datetime.now(timezone.utc)
    
    try:
        logger.info(f"Motivation Service –∑–∞–ø—É—â–µ–Ω –≤ UTC: {start_time_utc}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        database = Database()
        await database.connect()
        
        db_connected_utc = datetime.now(timezone.utc)
        logger.info(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (UTC: {db_connected_utc})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ pool —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
        if database.pool is None:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
        motivation_repository = MotivationRepository(database.pool)
        motivation_service = MotivationService()
        motivation_service.set_repository(motivation_repository)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º
        motivation_router = MotivationRouter(motivation_service)
        app.include_router(motivation_router.router)
        
        service_init_utc = datetime.now(timezone.utc)
        logger.info(f"–°–µ—Ä–≤–∏—Å –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (UTC: {service_init_utc})")
        
        # –ó–∞–ø—É—Å–∫ background worker (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ pool —Å–æ–∑–¥–∞–Ω)
        if database.pool:
            background_worker = MotivationWorker(database.pool)
            worker_task = asyncio.create_task(background_worker.start())
            
            worker_start_utc = datetime.now(timezone.utc)
            logger.info(f"Background Worker –∑–∞–ø—É—â–µ–Ω (UTC: {worker_start_utc})")
            
        complete_time_utc = datetime.now(timezone.utc)
        startup_duration = (complete_time_utc - start_time_utc).total_seconds()
        logger.info(f"‚úÖ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {startup_duration:.2f} —Å–µ–∫ (UTC: {complete_time_utc})")
        
    except Exception as e:
        error_time_utc = datetime.now(timezone.utc)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞ –≤ UTC {error_time_utc}: {str(e)}")
        raise e

@app.on_event("shutdown")
async def shutdown_event():
    global database, background_worker, worker_task
    
    shutdown_start_utc = datetime.now(timezone.utc)
    
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–µ—Ä–≤–∏—Å–∞ (UTC: {shutdown_start_utc})")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ background worker
        if background_worker:
            await background_worker.stop()
        
        if worker_task:
            worker_task.cancel()
            try:
                await worker_task
            except asyncio.CancelledError:
                pass
        
        worker_stop_utc = datetime.now(timezone.utc)
        logger.info(f"Background Worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (UTC: {worker_stop_utc})")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if database:
            await database.disconnect()
            
            db_disconnect_utc = datetime.now(timezone.utc)
            logger.info(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ (UTC: {db_disconnect_utc})")
        
        shutdown_complete_utc = datetime.now(timezone.utc)
        shutdown_duration = (shutdown_complete_utc - shutdown_start_utc).total_seconds()
        logger.info(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {shutdown_duration:.2f} —Å–µ–∫ (UTC: {shutdown_complete_utc})")
        
    except Exception as e:
        error_time_utc = datetime.now(timezone.utc)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–∞ –≤ UTC {error_time_utc}: {str(e)}")

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    error_time_utc = datetime.now(timezone.utc)
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ UTC {error_time_utc}: {str(exc)}")
    return JSONResponse(
        status_code=500,
        content={
            "detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "timestamp_utc": error_time_utc.isoformat()
        }
    )

def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    
    openapi_schema = get_openapi(
        title="Motivation Service API",
        version="1.0.0",
        description="API –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏",
        routes=app.routes,
    )
    
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi

if __name__ == "__main__":
    import uvicorn
    startup_utc = datetime.now(timezone.utc)
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Motivation Service –≤ UTC: {startup_utc}")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8008,
        reload=settings.DEBUG,
        log_level="info" if settings.DEBUG else "warning"
    ) 