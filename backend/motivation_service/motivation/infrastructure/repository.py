import asyncpg
import logging
from typing import Optional
import datetime as dt
import uuid
from datetime import timezone

from motivation.domain.models import DailyMotivation, DailyMotivationCreate, NeuroGenerationQueue

logger = logging.getLogger(__name__)


class MotivationRepository:
    def __init__(self, db_pool: asyncpg.Pool):
        self.db_pool = db_pool

    async def get_daily_motivation_by_user_and_date(self, user_id: int, date_start: dt.date, date_end: dt.date) -> Optional[DailyMotivation]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π completed –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ updated_at"""
        async with self.db_pool.acquire() as connection:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é completed –∑–∞–ø–∏—Å—å –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ updated_at
                query = """
                    SELECT daily_motivation_uuid, user_id, date_start, date_ended, status, 
                           motivation_message, fact, advice, created_at, updated_at
                    FROM daily_motivation
                    WHERE user_id = $1 
                    AND date_start >= $2 
                    AND date_ended <= $3 
                    AND status = 'completed'
                    ORDER BY updated_at DESC
                    LIMIT 1
                """
                row = await connection.fetchrow(query, user_id, date_start, date_end)
                
                if not row:
                    logger.info(f"üîç Completed –º–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è user_id={user_id} –≤ –ø–µ—Ä–∏–æ–¥–µ {date_start} ‚Üí {date_end}")
                    return None
                
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ completed –º–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è user_id={user_id}, updated_at={row['updated_at']}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ timezone
                created_at = row['created_at']
                updated_at = row['updated_at']
                
                if created_at and created_at.tzinfo is None:
                    created_at = created_at.replace(tzinfo=timezone.utc)
                if updated_at and updated_at.tzinfo is None:
                    updated_at = updated_at.replace(tzinfo=timezone.utc)
                
                return DailyMotivation(
                    daily_motivation_uuid=row['daily_motivation_uuid'],
                    user_id=row['user_id'],
                    date_start=row['date_start'],
                    date_ended=row['date_ended'],
                    status=row['status'],
                    motivation_message=row['motivation_message'],
                    fact=row['fact'],
                    advice=row['advice'],
                    created_at=created_at,
                    updated_at=updated_at
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {str(e)}")
                raise

    async def create_daily_motivation_with_queue_task(self, motivation_data: DailyMotivationCreate) -> DailyMotivation:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏"""
        async with self.db_pool.acquire() as connection:
            async with connection.transaction():
                try:
                    # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –º–æ—Ç–∏–≤–∞—Ü–∏–∏
                    motivation_uuid = uuid.uuid4()
                    current_time_utc = dt.datetime.now(timezone.utc)
                    
                    query = """
                        INSERT INTO daily_motivation 
                        (daily_motivation_uuid, user_id, date_start, date_ended, status, created_at, updated_at)
                        VALUES ($1::UUID, $2, $3, $4, $5::VARCHAR, $6::TIMESTAMPTZ, $7::TIMESTAMPTZ)
                        RETURNING daily_motivation_uuid, user_id, date_start, date_ended, status, 
                                 motivation_message, fact, advice, created_at, updated_at
                    """
                    
                    row = await connection.fetchrow(
                        query, 
                        motivation_uuid,
                        motivation_data.user_id,
                        motivation_data.date_start,
                        motivation_data.date_ended,
                        motivation_data.status,
                        current_time_utc,
                        current_time_utc
                    )
                    
                    # 2. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥–∏
                    queue_query = """
                        INSERT INTO neuro_generation_queue 
                        (daily_motivation_uuid, status, datetime_created)
                        VALUES ($1::UUID, $2::VARCHAR, $3::TIMESTAMPTZ)
                        RETURNING neuro_generation_queue_id, daily_motivation_uuid, status, datetime_created, datetime_started, datetime_completed
                    """
                    
                    queue_row = await connection.fetchrow(queue_query, motivation_uuid, 'new', current_time_utc)
                    
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è {motivation_uuid} –∏ –∑–∞–¥–∞—á–∞ {queue_row['neuro_generation_queue_id']} –≤ UTC: {current_time_utc}")
                    
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ datetime –∏–º–µ—é—Ç UTC timezone
                    created_at = row['created_at']
                    updated_at = row['updated_at']
                    if created_at and created_at.tzinfo is None:
                        created_at = created_at.replace(tzinfo=timezone.utc)
                    if updated_at and updated_at.tzinfo is None:
                        updated_at = updated_at.replace(tzinfo=timezone.utc)
                    
                    return DailyMotivation(
                        daily_motivation_uuid=row['daily_motivation_uuid'],
                        user_id=row['user_id'],
                        date_start=row['date_start'],
                        date_ended=row['date_ended'],
                        status=row['status'],
                        motivation_message=row['motivation_message'],
                        fact=row['fact'],
                        advice=row['advice'],
                        created_at=created_at,
                        updated_at=updated_at
                    )
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {str(e)}")
                    raise

    async def get_user_response_level(self, user_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.db_pool.acquire() as connection:
            try:
                query = """
                    SELECT response_level_id
                    FROM user_response_levels
                    WHERE user_id = $1
                """
                row = await connection.fetchrow(query, user_id)
                
                if row:
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω —É—Ä–æ–≤–µ–Ω—å –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –¥–ª—è user_id={user_id}: {row['response_level_id']}")
                    return row['response_level_id']
                else:
                    logger.info(f"üîç –£—Ä–æ–≤–µ–Ω—å –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id={user_id}")
                    return None
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∂—ë—Å—Ç–∫–æ—Å—Ç–∏: {str(e)}")
                raise

    async def create_or_update_user_response_level(self, user_id: int, response_level_id: int) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.db_pool.acquire() as connection:
            try:
                current_time_utc = dt.datetime.now(timezone.utc)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º UPSERT (ON CONFLICT)
                query = """
                    INSERT INTO user_response_levels (user_id, response_level_id, created_at, updated_at)
                    VALUES ($1, $2, $3, $3)
                    ON CONFLICT (user_id) 
                    DO UPDATE SET 
                        response_level_id = EXCLUDED.response_level_id,
                        updated_at = EXCLUDED.updated_at
                    RETURNING response_level_id
                """
                
                row = await connection.fetchrow(query, user_id, response_level_id, current_time_utc)
                
                logger.info(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è user_id={user_id}: {row['response_level_id']}")
                return row['response_level_id']
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∂—ë—Å—Ç–∫–æ—Å—Ç–∏: {str(e)}")
                raise

    async def check_motivation_exists_for_exact_interval(self, user_id: int, date_start: dt.date, date_ended: dt.date) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–∞—Ç"""
        async with self.db_pool.acquire() as connection:
            try:
                query = """
                    SELECT 1
                    FROM daily_motivation
                    WHERE user_id = $1 
                    AND date_start = $2 
                    AND date_ended = $3
                    LIMIT 1
                """
                row = await connection.fetchrow(query, user_id, date_start, date_ended)
                
                exists = row is not None
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è user_id={user_id}, –∏–Ω—Ç–µ—Ä–≤–∞–ª {date_start} ‚Üí {date_ended}: {'–Ω–∞–π–¥–µ–Ω–∞' if exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")
                
                return exists
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {str(e)}")
                raise

    async def get_motivation_by_status(self, user_id: int, date_start: dt.date, date_ended: dt.date, status: str) -> Optional[DailyMotivation]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        async with self.db_pool.acquire() as connection:
            try:
                query = """
                    SELECT daily_motivation_uuid, user_id, date_start, date_ended, status, 
                           motivation_message, fact, advice, created_at, updated_at
                    FROM daily_motivation
                    WHERE user_id = $1 
                    AND date_start = $2 
                    AND date_ended = $3 
                    AND status = $4
                    ORDER BY updated_at DESC
                    LIMIT 1
                """
                row = await connection.fetchrow(query, user_id, date_start, date_ended, status)
                
                if not row:
                    logger.info(f"üîç –ú–æ—Ç–∏–≤–∞—Ü–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è user_id={user_id} –≤ –ø–µ—Ä–∏–æ–¥–µ {date_start} ‚Üí {date_ended}")
                    return None
                
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}' –¥–ª—è user_id={user_id}, updated_at={row['updated_at']}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ timezone
                created_at = row['created_at']
                updated_at = row['updated_at']
                
                if created_at and created_at.tzinfo is None:
                    created_at = created_at.replace(tzinfo=timezone.utc)
                if updated_at and updated_at.tzinfo is None:
                    updated_at = updated_at.replace(tzinfo=timezone.utc)
                
                return DailyMotivation(
                    daily_motivation_uuid=row['daily_motivation_uuid'],
                    user_id=row['user_id'],
                    date_start=row['date_start'],
                    date_ended=row['date_ended'],
                    status=row['status'],
                    motivation_message=row['motivation_message'],
                    fact=row['fact'],
                    advice=row['advice'],
                    created_at=created_at,
                    updated_at=updated_at
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}': {str(e)}")
                raise 