import logging
import asyncio
from datetime import datetime, date, timezone
from typing import Dict, Any, Optional

from motivation.domain.models import DailyMotivation, DailyMotivationCreate, DailyMotivationResponse
from motivation.infrastructure.repository import MotivationRepository

logger = logging.getLogger(__name__)


class MotivationService:
    def __init__(self):
        self.repository: Optional[MotivationRepository] = None
        self._locks = {}  # –°–ª–æ–≤–∞—Ä—å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    def set_repository(self, repository: MotivationRepository):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.repository = repository

    async def get_daily_motivation(self, user_id: int, date_start: str, date_end: str) -> DailyMotivationResponse:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        if not self.repository:
            raise ValueError("Repository –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
        if user_id not in self._locks:
            self._locks[user_id] = asyncio.Lock()

        async with self._locks[user_id]:
            current_time_utc = datetime.now(timezone.utc)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –¥–∞—Ç—ã
            try:
                date_start_obj = datetime.strptime(date_start, "%Y-%m-%d").date()
                date_end_obj = datetime.strptime(date_end, "%Y-%m-%d").date()
            except ValueError as e:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD: {str(e)}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
            if date_start_obj >= date_end_obj:
                raise ValueError("date_start –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ date_end")
            
            logger.info(f"üîç –ü–æ–∏—Å–∫ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}, –ø–µ—Ä–∏–æ–¥: {date_start_obj} ‚Üí {date_end_obj} (UTC: {current_time_utc})")

            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–∞—Ç
            exact_interval_exists = await self.repository.check_motivation_exists_for_exact_interval(
                user_id=user_id,
                date_start=date_start_obj,
                date_ended=date_end_obj
            )

            if exact_interval_exists:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                regenerating_motivation = await self.repository.get_motivation_by_status(
                    user_id=user_id,
                    date_start=date_start_obj,
                    date_ended=date_end_obj,
                    status='regenerating'
                )
                
                if regenerating_motivation:
                    logger.info(f"üîÑ –ù–∞–π–¥–µ–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –∏—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é completed")
                    # –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é completed –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –∂–µ –ø–µ—Ä–∏–æ–¥–∞
                    previous_motivation = await self.repository.get_daily_motivation_by_user_and_date(
                        user_id=user_id, 
                        date_start=date_start_obj,
                        date_end=date_end_obj
                    )
                    if previous_motivation:
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'regenerated'
                        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'regenerated'")
                        return DailyMotivationResponse(
                            generation_date=previous_motivation.date_ended.strftime("%Y-%m-%d"),
                            date_period=f"{previous_motivation.date_start.strftime('%Y-%m-%d')} ‚Üí {previous_motivation.date_ended.strftime('%Y-%m-%d')}",
                            status='regenerated',
                            motivation_message=previous_motivation.motivation_message,
                            fact=previous_motivation.fact,
                            advice=previous_motivation.advice
                        )
                
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø–æ–ª—É—á–∞–µ–º –µ—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
                existing_motivation = await self.repository.get_daily_motivation_by_user_and_date(
                    user_id=user_id, 
                    date_start=date_start_obj,
                    date_end=date_end_obj
                )
                if existing_motivation:
                    found_time_utc = datetime.now(timezone.utc)
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è: status={existing_motivation.status} (UTC: {found_time_utc})")
                    return self._create_response(existing_motivation)
                else:
                    logger.warning(f"‚ùå –ó–∞–ø–∏—Å—å –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ {date_start_obj} ‚Üí {date_end_obj} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è user_id={user_id}")
                    raise ValueError(f"–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ {date_start_obj} ‚Üí {date_end_obj} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ regenerate-motivation –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –∑–∞–¥–∞—á–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏
            create_time_utc = datetime.now(timezone.utc)
            logger.info(f"üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è user_id={user_id} (UTC: {create_time_utc})")
            
            motivation_data = DailyMotivationCreate(
                user_id=user_id,
                date_start=date_start_obj,
                date_ended=date_end_obj,
                status='new'
            )

            new_motivation = await self.repository.create_daily_motivation_with_queue_task(motivation_data)
            
            created_time_utc = datetime.now(timezone.utc)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è: {new_motivation.daily_motivation_uuid} (UTC: {created_time_utc})")

            return self._create_response(new_motivation)

    def _create_response(self, motivation: DailyMotivation) -> DailyMotivationResponse:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –º–æ–¥–µ–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
        response_time_utc = datetime.now(timezone.utc)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º date_ended –∫–∞–∫ generation_date)
        generation_date = motivation.date_ended.strftime("%Y-%m-%d")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ (–æ—Ç —Ä–∞–Ω–Ω–µ–π –∫ –ø–æ–∑–¥–Ω–µ–π –¥–∞—Ç–µ: date_start ‚Üí date_ended)
        date_period = f"{motivation.date_start.strftime('%Y-%m-%d')} ‚Üí {motivation.date_ended.strftime('%Y-%m-%d')}"
        
        logger.debug(f"üìÑ –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ {motivation.daily_motivation_uuid} (UTC: {response_time_utc})")
        
        return DailyMotivationResponse(
            generation_date=generation_date,
            date_period=date_period,
            status=motivation.status,
            motivation_message=motivation.motivation_message,
            fact=motivation.fact,
            advice=motivation.advice
        )

    async def get_motivation_data(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)"""
        current_time_utc = datetime.now(timezone.utc)
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è user_id={user_id} (UTC: {current_time_utc})")
        
        return {
            "user_id": user_id,
            "level": 1,
            "points": 0,
            "timestamp_utc": current_time_utc.isoformat()
        }

    async def update_motivation_level(self, user_id: int, level: int) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)"""
        current_time_utc = datetime.now(timezone.utc)
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ user_id={user_id}, level={level} (UTC: {current_time_utc})")
        
        return True

    async def regenerate_daily_motivation(self, user_id: int, date_start: str, date_end: str) -> DailyMotivationResponse:
        """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        if not self.repository:
            raise ValueError("Repository –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
        if user_id not in self._locks:
            self._locks[user_id] = asyncio.Lock()

        async with self._locks[user_id]:
            current_time_utc = datetime.now(timezone.utc)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –¥–∞—Ç—ã
            try:
                date_start_obj = datetime.strptime(date_start, "%Y-%m-%d").date()
                date_end_obj = datetime.strptime(date_end, "%Y-%m-%d").date()
            except ValueError as e:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD: {str(e)}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
            if date_start_obj >= date_end_obj:
                raise ValueError("date_start –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ date_end")
            
            logger.info(f"üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}, –ø–µ—Ä–∏–æ–¥: {date_start_obj} ‚Üí {date_end_obj} (UTC: {current_time_utc})")

            # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–ø–∏—Å—å –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å completed
            existing_motivation = await self.repository.get_daily_motivation_by_user_and_date(
                user_id=user_id, 
                date_start=date_start_obj,
                date_end=date_end_obj
            )

            if existing_motivation:
                if existing_motivation.status != 'completed':
                    logger.warning(f"‚ùå –ù–µ–ª—å–∑—è —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {existing_motivation.status}")
                    raise ValueError(f"–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'completed'. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {existing_motivation.status}")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Å—Ç–∞—Ä–∞—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –±–∞–∑–µ)
            motivation_data = DailyMotivationCreate(
                user_id=user_id,
                date_start=date_start_obj,
                date_ended=date_end_obj,
                status='regenerating'
            )

            new_motivation = await self.repository.create_daily_motivation_with_queue_task(motivation_data)
            
            created_time_utc = datetime.now(timezone.utc)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {new_motivation.daily_motivation_uuid} (UTC: {created_time_utc})")

            return self._create_response(new_motivation)

    async def get_user_response_level(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.repository:
            raise ValueError("Repository –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –¥–ª—è user_id={user_id}")
        
        level = await self.repository.get_user_response_level(user_id)
        if level is None:
            # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Å —É—Ä–æ–≤–Ω–µ–º 1 (–ª–æ—è–ª—å–Ω—ã–π)
            logger.info(f"üìù –°–æ–∑–¥–∞—ë–º —É—Ä–æ–≤–µ–Ω—å –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è user_id={user_id}")
            level = await self.repository.create_or_update_user_response_level(user_id, 1)
        
        return level

    async def update_user_response_level(self, user_id: int, response_level_id: int) -> int:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.repository:
            raise ValueError("Repository –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è
        if response_level_id not in [1, 2, 3]:
            raise ValueError("response_level_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1, 2 –∏–ª–∏ 3")

        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –¥–ª—è user_id={user_id} –Ω–∞ {response_level_id}")
        
        updated_level = await self.repository.create_or_update_user_response_level(user_id, response_level_id)
        
        return updated_level 