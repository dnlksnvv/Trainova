from fastapi import APIRouter, HTTPException, Depends, Request
from typing import Dict, Any
import logging
from datetime import datetime, timezone

from motivation.application.services.motivation_service import MotivationService
from motivation.domain.models import DailyMotivationResponse, UserResponseLevelResponse, UserResponseLevelUpdate

logger = logging.getLogger(__name__)


class MotivationRouter:
    def __init__(self, motivation_service: MotivationService):
        self.motivation_service = motivation_service
        self.router = APIRouter(tags=["motivation"])
        self._setup_routes()

    def _setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        
        @self.router.get("/user/{user_id}")
        async def get_user_motivation(user_id: int) -> Dict[str, Any]:
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            try:
                return await self.motivation_service.get_motivation_data(user_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {str(e)}")
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

        @self.router.put("/user/{user_id}/level")
        async def update_motivation_level(user_id: int, level: int) -> Dict[str, Any]:
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            try:
                success = await self.motivation_service.update_motivation_level(user_id, level)
                if success:
                    return {"message": "–£—Ä–æ–≤–µ–Ω—å –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω", "user_id": user_id, "level": level}
                else:
                    raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –º–æ—Ç–∏–≤–∞—Ü–∏–∏")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {str(e)}")
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

        @self.router.get("/daily-motivation", response_model=DailyMotivationResponse)
        async def get_daily_motivation(
            request: Request,
            date_start: str,  # Query –ø–∞—Ä–∞–º–µ—Ç—Ä: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (—Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞)
            date_end: str     # Query –ø–∞—Ä–∞–º–µ—Ç—Ä: –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (date_start - 7 –¥–Ω–µ–π)
        ) -> DailyMotivationResponse:
            """
            –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            
            Args:
                date_start: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (—Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞)
                date_end: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (date_start - N –¥–Ω–µ–π)
            """
            try:
                current_time_utc = datetime.now(timezone.utc)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
                user_id = request.state.user.get("user_id")
                if not user_id:
                    raise HTTPException(status_code=401, detail="User ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ")

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                if isinstance(user_id, str):
                    user_id = int(user_id)

                logger.info(f"üéØ API: –ó–∞–ø—Ä–æ—Å –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}, –ø–µ—Ä–∏–æ–¥: {date_start} ‚Üí {date_end} (UTC: {current_time_utc})")

                # –ü–æ–ª—É—á–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
                result = await self.motivation_service.get_daily_motivation(
                    user_id=user_id,
                    date_start=date_start, 
                    date_end=date_end
                )
                
                response_time_utc = datetime.now(timezone.utc)
                logger.info(f"‚úÖ API: –ú–æ—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è user_id={user_id}, —Å—Ç–∞—Ç—É—Å={result.status} (UTC: {response_time_utc})")
                return result

            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
                raise HTTPException(status_code=400, detail=str(e))
            except Exception as e:
                error_time_utc = datetime.now(timezone.utc)
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –≤ UTC {error_time_utc}: {str(e)}")
                raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

        @self.router.post("/regenerate-motivation", response_model=DailyMotivationResponse)
        async def regenerate_motivation(
            request: Request,
            regeneration_request: dict
        ) -> DailyMotivationResponse:
            """
            –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            Args:
                regeneration_request: JSON —Å –ø–æ–ª—è–º–∏ date_start –∏ date_end
            """
            try:
                current_time_utc = datetime.now(timezone.utc)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
                user_id = request.state.user.get("user_id")
                if not user_id:
                    raise HTTPException(status_code=401, detail="User ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ")

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                if isinstance(user_id, str):
                    user_id = int(user_id)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                date_start = regeneration_request.get("date_start")
                date_end = regeneration_request.get("date_end")
                
                if not date_start or not date_end:
                    raise HTTPException(status_code=400, detail="–¢—Ä–µ–±—É—é—Ç—Å—è –ø–æ–ª—è date_start –∏ date_end")

                logger.info(f"üîÑ API: –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}, –ø–µ—Ä–∏–æ–¥: {date_start} ‚Üí {date_end} (UTC: {current_time_utc})")

                # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Å–µ—Ä–≤–∏—Å–µ
                result = await self.motivation_service.regenerate_daily_motivation(
                    user_id=user_id,
                    date_start=date_start, 
                    date_end=date_end
                )
                
                response_time_utc = datetime.now(timezone.utc)
                logger.info(f"‚úÖ API: –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è user_id={user_id}, —Å—Ç–∞—Ç—É—Å={result.status} (UTC: {response_time_utc})")
                return result

            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
                raise HTTPException(status_code=400, detail=str(e))
            except Exception as e:
                error_time_utc = datetime.now(timezone.utc)
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –≤ UTC {error_time_utc}: {str(e)}")
                raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

        @self.router.get("/user-response-level", response_model=UserResponseLevelResponse)
        async def get_user_response_level(request: Request) -> UserResponseLevelResponse:
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
                user_id = request.state.user.get("user_id")
                if not user_id:
                    raise HTTPException(status_code=401, detail="User ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ")

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                if isinstance(user_id, str):
                    user_id = int(user_id)

                logger.info(f"üîç API: –ó–∞–ø—Ä–æ—Å —É—Ä–æ–≤–Ω—è –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –¥–ª—è user_id={user_id}")

                # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                level = await self.motivation_service.get_user_response_level(user_id)
                
                logger.info(f"‚úÖ API: –£—Ä–æ–≤–µ–Ω—å –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω –¥–ª—è user_id={user_id}: {level}")
                return UserResponseLevelResponse(response_level_id=level)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∂—ë—Å—Ç–∫–æ—Å—Ç–∏: {str(e)}")
                raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

        @self.router.put("/user-response-level", response_model=UserResponseLevelResponse)
        async def update_user_response_level(
            request: Request,
            level_update: UserResponseLevelUpdate
        ) -> UserResponseLevelResponse:
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
                user_id = request.state.user.get("user_id")
                if not user_id:
                    raise HTTPException(status_code=401, detail="User ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–∫–µ–Ω–µ")

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                if isinstance(user_id, str):
                    user_id = int(user_id)

                logger.info(f"üîÑ API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –¥–ª—è user_id={user_id} –Ω–∞ {level_update.response_level_id}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                updated_level = await self.motivation_service.update_user_response_level(
                    user_id, level_update.response_level_id
                )
                
                logger.info(f"‚úÖ API: –£—Ä–æ–≤–µ–Ω—å –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è user_id={user_id}: {updated_level}")
                return UserResponseLevelResponse(response_level_id=updated_level)

            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω—è –∂—ë—Å—Ç–∫–æ—Å—Ç–∏: {str(e)}")
                raise HTTPException(status_code=400, detail=str(e))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∂—ë—Å—Ç–∫–æ—Å—Ç–∏: {str(e)}")
                raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

        @self.router.get("/health")
        async def health_check() -> Dict[str, str]:
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
            current_time_utc = datetime.now(timezone.utc)
            return {
                "status": "healthy", 
                "service": "motivation",
                "timestamp_utc": current_time_utc.isoformat()
            } 