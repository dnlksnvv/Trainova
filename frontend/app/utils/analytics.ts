// –ü—Ä–æ—Å—Ç–æ–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–æ–π
declare global {
  interface Window {
    ym: (counterId: number, method: string, ...params: any[]) => void;
  }
}

const YANDEX_METRIKA_ID = 102273732;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
interface ActiveSession {
  startTime: number;
  workoutId: string;
  workoutName?: string;
  source?: string;
}

class SessionTracker {
  private activeSessions: Map<string, ActiveSession> = new Map();

  // –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  startWorkoutSession(workoutId: string, workoutName?: string, source?: string): string {
    const sessionId = `workout_${workoutId}_${Date.now()}`;
    
    this.activeSessions.set(sessionId, {
      startTime: Date.now(),
      workoutId,
      workoutName,
      source
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    YMAnalytics.goal('workout_started', {
      workout_id: workoutId,
      workout_name: workoutName,
      source: source || 'app',
      session_id: sessionId
    });

    console.log(`üèÅ –ù–∞—á–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${workoutName || workoutId} (${sessionId})`);
    return sessionId;
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  endWorkoutSession(sessionId: string, completionStatus: 'completed' | 'abandoned' | 'paused' = 'completed'): number {
    const session = this.activeSessions.get(sessionId);
    
    if (!session) {
      console.warn(`‚ö†Ô∏è  –°–µ—Å—Å–∏—è ${sessionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return 0;
    }

    const duration = Math.round((Date.now() - session.startTime) / 1000); // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    YMAnalytics.goal('workout_ended', {
      workout_id: session.workoutId,
      workout_name: session.workoutName,
      duration_seconds: duration,
      duration_minutes: Math.round(duration / 60),
      completion_status: completionStatus,
      source: session.source || 'app',
      session_id: sessionId
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if (completionStatus === 'completed') {
      YMAnalytics.goal('workout_completed', {
        workout_id: session.workoutId,
        duration_minutes: Math.round(duration / 60)
      });
    }

    this.activeSessions.delete(sessionId);
    console.log(`üèÜ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${session.workoutName || session.workoutId}, –≤—Ä–µ–º—è: ${Math.round(duration / 60)} –º–∏–Ω (${completionStatus})`);
    
    return duration;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
  getActiveSessions(): Map<string, ActiveSession> {
    return this.activeSessions;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
  sendProgressUpdate(sessionId: string, currentExercise?: string): void {
    const session = this.activeSessions.get(sessionId);
    
    if (!session) return;

    const duration = Math.round((Date.now() - session.startTime) / 1000);
    
    YMAnalytics.goal('workout_progress', {
      workout_id: session.workoutId,
      duration_seconds: duration,
      current_exercise: currentExercise,
      session_id: sessionId
    });
  }
}

const sessionTracker = new SessionTracker();

// –ü—Ä–æ—Å—Ç–æ–π —ç–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
export const YMAnalytics = {
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–µ–ª–∏
  goal: (target: string, params?: Record<string, any>) => {
    if (typeof window !== 'undefined' && window.ym) {
      window.ym(YANDEX_METRIKA_ID, 'reachGoal', target, params);
      console.log(`üéØ –¶–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${target}`, params);
    } else {
      console.warn('‚ö†Ô∏è  –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    }
  },

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  pageView: (url?: string) => {
    if (typeof window !== 'undefined' && window.ym) {
      window.ym(YANDEX_METRIKA_ID, 'hit', url);
      console.log(`üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${url}`);
    } else {
      console.warn('‚ö†Ô∏è  –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    }
  },

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  setUserParams: (params: Record<string, any>) => {
    if (typeof window !== 'undefined' && window.ym) {
      window.ym(YANDEX_METRIKA_ID, 'userParams', params);
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`, params);
    } else {
      console.warn('‚ö†Ô∏è  –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    }
  },

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–∑–∏—Ç–∞
  setVisitParams: (params: Record<string, any>) => {
    if (typeof window !== 'undefined' && window.ym) {
      window.ym(YANDEX_METRIKA_ID, 'params', params);
      console.log(`üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–∑–∏—Ç–∞:`, params);
    } else {
      console.warn('‚ö†Ô∏è  –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    }
  },

  // === –ú–ï–¢–û–î–´ –î–õ–Ø –¢–†–ï–ù–ò–†–û–í–û–ö ===
  
  // –ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  startWorkout: (workoutId: string, workoutName?: string, source?: string): string => {
    return sessionTracker.startWorkoutSession(workoutId, workoutName, source);
  },

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  endWorkout: (sessionId: string, completionStatus: 'completed' | 'abandoned' | 'paused' = 'completed'): number => {
    return sessionTracker.endWorkoutSession(sessionId, completionStatus);
  },

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  workoutProgress: (sessionId: string, currentExercise?: string): void => {
    sessionTracker.sendProgressUpdate(sessionId, currentExercise);
  },

  // –ù–∞—á–∞–ª–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  startExercise: (exerciseName: string, workoutId?: string): void => {
    YMAnalytics.goal('exercise_started', {
      exercise_name: exerciseName,
      workout_id: workoutId
    });
  },

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  completeExercise: (exerciseName: string, duration?: number, workoutId?: string): void => {
    YMAnalytics.goal('exercise_completed', {
      exercise_name: exerciseName,
      duration_seconds: duration,
      workout_id: workoutId
    });
  },

  // –ü–∞—É–∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  pauseWorkout: (sessionId: string): void => {
    YMAnalytics.goal('workout_paused', {
      session_id: sessionId
    });
  },

  // –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  resumeWorkout: (sessionId: string): void => {
    YMAnalytics.goal('workout_resumed', {
      session_id: sessionId
    });
  },

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
  nextExercise: (exerciseName: string, workoutId?: string): void => {
    YMAnalytics.goal('exercise_next', {
      exercise_name: exerciseName,
      workout_id: workoutId,
      direction: 'forward'
    });
  },

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
  previousExercise: (exerciseName: string, workoutId?: string): void => {
    YMAnalytics.goal('exercise_previous', {
      exercise_name: exerciseName,
      workout_id: workoutId,
      direction: 'backward'
    });
  },

  // === –ú–ï–¢–û–î–´ –î–õ–Ø –ö–£–†–°–û–í –ò –£–†–û–ö–û–í ===

  // –û—Ç–∫—Ä—ã—Ç–∏–µ —É—Ä–æ–∫–∞ –≤ –∫—É—Ä—Å–µ
  openLesson: (lessonName: string, courseId: string, lessonId?: string): void => {
    YMAnalytics.goal('lesson_opened', {
      lesson_name: lessonName,
      course_id: courseId,
      lesson_id: lessonId,
      timestamp: new Date().toISOString()
    });
  },

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ —É—Ä–æ–∫–∞
  watchVideo: (lessonName: string, courseId: string, lessonId?: string): void => {
    YMAnalytics.goal('lesson_video_watched', {
      lesson_name: lessonName,
      course_id: courseId,
      lesson_id: lessonId,
      timestamp: new Date().toISOString()
    });
  },

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞
  completeLesson: (lessonName: string, courseId: string, duration?: number, lessonId?: string): void => {
    YMAnalytics.goal('lesson_completed', {
      lesson_name: lessonName,
      course_id: courseId,
      lesson_id: lessonId,
      duration_seconds: duration,
      timestamp: new Date().toISOString()
    });
  },

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –∫—É—Ä—Å–∞
  openCourse: (courseName: string, courseId: string): void => {
    YMAnalytics.goal('course_opened', {
      course_name: courseName,
      course_id: courseId,
      timestamp: new Date().toISOString()
    });
  },

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫—É—Ä—Å
  subscribeCourse: (courseName: string, courseId: string, price?: number): void => {
    YMAnalytics.goal('course_subscribed', {
      course_name: courseName,
      course_id: courseId,
      price: price,
      timestamp: new Date().toISOString()
    });
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É
  getFreeAccess: (courseName: string, courseId: string): void => {
    YMAnalytics.goal('course_free_access', {
      course_name: courseName,
      course_id: courseId,
      timestamp: new Date().toISOString()
    });
  }
};

export default YMAnalytics; 

// –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ 03.06.2025 - –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ