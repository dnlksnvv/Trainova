"use client";

import React, { useState, useEffect, useRef, useCallback } from "react";
import { useParams, useRouter, useSearchParams } from "next/navigation";
import { useTheme } from "@mui/material/styles";
import {
  Box,
  Stack,
  Typography,
  Paper,
  IconButton,
  CircularProgress,
  Button,
  Alert,
  Rating,
  Chip,
  Divider,
  Avatar,
  Container,
  TextField,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  useMediaQuery,
  Card,
  Tooltip,
  Collapse
} from "@mui/material";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import PlayCircleOutlineIcon from "@mui/icons-material/PlayCircleOutline";
import ThumbUpOutlinedIcon from "@mui/icons-material/ThumbUpOutlined";
import ThumbUpIcon from "@mui/icons-material/ThumbUp";
import ThumbDownOutlinedIcon from "@mui/icons-material/ThumbDownOutlined";
import ThumbDownIcon from "@mui/icons-material/ThumbDown";
import ShareIcon from "@mui/icons-material/Share";
import SettingsIcon from "@mui/icons-material/Settings";
import VisibilityIcon from "@mui/icons-material/Visibility";
import CalendarTodayIcon from "@mui/icons-material/CalendarToday";
import CommentIcon from "@mui/icons-material/Comment";
import SendIcon from "@mui/icons-material/Send";
import StarIcon from '@mui/icons-material/Star';
import StarBorderIcon from '@mui/icons-material/StarBorder';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ExpandLessIcon from '@mui/icons-material/ExpandLess';
import { coursesApi, workoutsApi, CourseWorkoutResponse, workoutRatingsApi, profileApi } from "@/app/services/api";
import { useAuth } from "@/app/auth/hooks/useAuth";
import MainLayout from "@/app/components/layouts/MainLayout";
import SearchBar from "@/app/components/shared/SearchBar";
import WorkoutRating from '@/app/courses/[id]/components/WorkoutRating';
import TrainerInfo from '@/app/components/shared/TrainerInfo';
import YMAnalytics from '@/app/utils/analytics';
import { WorkoutErrorBlock } from './components/WorkoutErrorBlock';

interface Comment {
  id: string;
  authorName: string;
  authorAvatar: string;
  text: string;
  date: string;
  likes: number;
  isLiked: boolean;
}

interface WorkoutPlayerPageProps {}

export default function WorkoutPlayerPage({}: WorkoutPlayerPageProps) {
  const theme = useTheme();
  const params = useParams();
  const router = useRouter();
  const searchParams = useSearchParams();
  const { user, loading: authLoading } = useAuth();
  const isSmallScreen = useMediaQuery(theme.breakpoints.down('md'));
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª—å—é –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
  const [isSearchBarVisible, setIsSearchBarVisible] = useState(true);
  const [lastScrollY, setLastScrollY] = useState(0);
  const [isAtTop, setIsAtTop] = useState(true);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ –ø—Ä—è–º–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const [showVideo, setShowVideo] = useState(false);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
  const [isDescriptionExpanded, setIsDescriptionExpanded] = useState(false);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º id –∫—É—Ä—Å–∞ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const courseId = Array.isArray(params.id) ? params.id[0] : params.id;
  const workoutId = searchParams.get('workoutId');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏ –∫—É—Ä—Å–µ
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [errorType, setErrorType] = useState<'forbidden' | 'notFound' | null>(null);
  const [workout, setWorkout] = useState<CourseWorkoutResponse | null>(null);
  const [isOwner, setIsOwner] = useState(false);
  const [authorName, setAuthorName] = useState("–¢—Ä–µ–Ω–µ—Ä");
  const [authorAvatar, setAuthorAvatar] = useState<string | null>(null);
  const [authorDescription, setAuthorDescription] = useState<string | null>(null);
  const [authorId, setAuthorId] = useState<string | null>(null);
  const [authorLoading, setAuthorLoading] = useState(false);
  const [viewCount, setViewCount] = useState(Math.floor(Math.random() * 1000));
  const [uploadDate, setUploadDate] = useState(new Date().toLocaleDateString());
  const [rating, setRating] = useState<number | null>(0);
  const [authorRating, setAuthorRating] = useState<number>(0);
  const [userWorkoutRating, setUserWorkoutRating] = useState<number>(0);
  
  // –ó–∞–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
  const [userRating, setUserRating] = useState<number | null>(null);
  const [isRatingSubmitted, setIsRatingSubmitted] = useState(false);
  const [ratingHover, setRatingHover] = useState(-1);
  const [totalRatings, setTotalRatings] = useState(Math.floor(Math.random() * 50) + 5);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  const [comments, setComments] = useState<Comment[]>([]);
  const [newComment, setNewComment] = useState("");
  const [commentsLoading, setCommentsLoading] = useState(false);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞
  useEffect(() => {
    const handleScroll = () => {
      const currentScrollY = window.scrollY;
      const direction = currentScrollY < lastScrollY ? 'up' : 'down';
      const distance = Math.abs(currentScrollY - lastScrollY);
      const atTop = currentScrollY < 10;
      
      setIsAtTop(atTop);
      
      if (atTop) {
        setIsSearchBarVisible(true);
      } else if (direction === 'down' && distance > 30) {
        setIsSearchBarVisible(false);
      } else if (direction === 'up') {
        setIsSearchBarVisible(true);
      }
      
      setLastScrollY(currentScrollY);
    };
    
    window.addEventListener('scroll', handleScroll, { passive: true });
    
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, [lastScrollY]);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∫–∞–∑–∞ –≤–∏–¥–µ–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (workout && workout.video_url) {
      setShowVideo(true);
      
      // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ —É—Ä–æ–∫–∞
      if (workout.name && courseId) {
        YMAnalytics.watchVideo(workout.name, String(courseId), String(workoutId));
      }
    }
  }, [workout, courseId, workoutId]);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    console.log('üîÑ useEffect —Å—Ä–∞–±–æ—Ç–∞–ª:', { workoutId, authLoading, user: !!user, courseId });
    
    if (workoutId) {
      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ß–ò–©–ê–ï–ú –í–ï–°–¨ –ö–≠–®
      sessionStorage.clear();
      localStorage.clear();
      console.log('üóëÔ∏è –í–°–Å –ö–≠–® –û–ß–ò–©–ï–ù!');
      
      // –£–±–∏—Ä–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ - –≤—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
      loadWorkoutData();
      loadMockComments(); // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    }
  }, [workoutId, authLoading, user, courseId]);
  
  // –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è –∫—É—Ä—Å–æ–º
  const checkOwnership = useCallback(async (courseId: string, userId: number, workoutData: CourseWorkoutResponse) => {
    try {
      console.log('üè´ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è –∫—É—Ä—Å–æ–º:', courseId);
      const courseData = await coursesApi.getById(courseId);
      console.log('üè´ –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã:', courseData);
      const isOwner = courseData.user_id === userId;
      setIsOwner(isOwner);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∞–≤—Ç–æ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞
      setAuthorRating(Number(courseData.rating) || 0);
      console.log('‚≠ê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω authorRating:', Number(courseData.rating) || 0);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∞ –∫—É—Ä—Å–∞
      if (courseData) {
        setAuthorId(courseData.user_id.toString());
        try {
          const authorProfile = await profileApi.getUserProfile(courseData.user_id.toString());
          if (authorProfile) {
            setAuthorName(`${authorProfile.first_name} ${authorProfile.last_name}`.trim() || "–ê–≤—Ç–æ—Ä –∫—É—Ä—Å–∞");
            setAuthorAvatar(authorProfile.avatar_url);
            setAuthorDescription(authorProfile.description);
          } else {
            setAuthorName(courseData.name?.split(' ')[0] || "–¢—Ä–µ–Ω–µ—Ä");
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∞ –∫—É—Ä—Å–∞:", error);
          setAuthorName(courseData.name?.split(' ')[0] || "–¢—Ä–µ–Ω–µ—Ä");
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–ª–∞–¥–µ–Ω–∏—è –∫—É—Ä—Å–æ–º:", error);
    }
  }, []);
  
  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const loadWorkoutData = async () => {
    if (!workoutId) {
      console.log('‚ùå workoutId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞');
      return;
    }
    
    try {
      console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', workoutId);
      setLoading(true);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const token = document.cookie
        .split('; ')
        .find(row => row.startsWith('access_token='))
        ?.split('=')[1];
      
      console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', token ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
      console.log('üì° –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ workoutsApi.getById —Å workoutId:', String(workoutId));
      const workoutData = await workoutsApi.getById(
        String(workoutId), 
        token
      );
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', workoutData);
      setWorkout(workoutData);
      
      // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –æ—Ç–∫—Ä—ã—Ç–∏–µ —É—Ä–æ–∫–∞
      if (workoutData?.name && courseId) {
        YMAnalytics.openLesson(workoutData.name, String(courseId), String(workoutId));
      }
      
      // –ï—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
      if (workoutData && !authLoading && user && courseId) {
        console.log('üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –∫—É—Ä—Å–æ–º –¥–ª—è courseId:', String(courseId));
        console.log('üë§ –£—Å–ª–æ–≤–∏—è:', { workoutData: !!workoutData, authLoading, user: !!user, courseId });
        checkOwnership(String(courseId), Number(user.user_id), workoutData);
      } else {
        console.log('‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —É—Å–ª–æ–≤–∏—è –¥–ª—è checkOwnership:', { workoutData: !!workoutData, authLoading, user: !!user, courseId });
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      try {
        const ratingStats = await workoutRatingsApi.getWorkoutRatingStats(String(workoutId), token);
        if (ratingStats) {
          setRating(ratingStats.average_rating);
          setTotalRatings(ratingStats.total_ratings);
        }
      } catch (ratingError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:", ratingError);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        if (workoutData.rating !== null && typeof workoutData.rating === 'number') {
          setRating(workoutData.rating);
        }
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      if (token && user) {
        try {
          console.log('‚≠ê –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
          const userRating = await workoutRatingsApi.getUserRating(String(workoutId), token);
          if (userRating && userRating.rating) {
            setUserWorkoutRating(Number(userRating.rating));
            console.log('‚≠ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω:', userRating.rating);
          } else {
            setUserWorkoutRating(0);
            console.log('‚≠ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É');
          }
        } catch (userRatingError) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:", userRatingError);
          setUserWorkoutRating(0);
        }
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏
      let uploadDateStr = '';
      if (workoutData.created_at) {
        const uploadDate = new Date(workoutData.created_at);
        uploadDateStr = uploadDate.toLocaleDateString();
        setUploadDate(uploadDateStr);
      }
      
      setLoading(false);
      console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (error?.response?.status === 403 || error?.status === 403) {
        console.log('–î–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫—É –∑–∞–ø—Ä–µ—â–µ–Ω - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º errorType = forbidden');
        setErrorType('forbidden');
        setError("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫—É—Ä—Å");
      } else {
        console.log('–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º errorType = notFound');
        setErrorType('notFound');
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏");
      }
      
      setLoading(false);
    }
  };
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  const loadMockComments = () => {
    setCommentsLoading(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(() => {
      const mockComments: Comment[] = [
        {
          id: '1',
          authorName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü.',
          authorAvatar: '',
          text: '–û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞! –û—á–µ–Ω—å –ø–æ–º–æ–≥–ª–∞ –º–Ω–µ —É–ª—É—á—à–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É.',
          date: '3 –¥–Ω—è –Ω–∞–∑–∞–¥',
          likes: 12,
          isLiked: false
        },
        {
          id: '2',
          authorName: '–ï–ª–µ–Ω–∞ –°.',
          authorAvatar: '',
          text: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ!',
          date: '1 –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥',
          likes: 8,
          isLiked: false
        },
        {
          id: '3',
          authorName: '–ú–∞–∫—Å–∏–º –ö.',
          authorAvatar: '',
          text: '–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö, –Ω–æ –æ—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤.',
          date: '2 –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥',
          likes: 5,
          isLiked: false
        }
      ];
      
      setComments(mockComments);
      setCommentsLoading(false);
    }, 1000);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫—É—Ä—Å–∞
  const handleBackToCourse = () => {
    router.push(`/courses/${courseId}`);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥—Ä—É–≥–∏–º –∫—É—Ä—Å–∞–º
  const handleViewOtherCourses = () => {
    router.push('/courses');
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—Ä–µ–Ω–µ—Ä–∞
  const handleCoachClick = () => {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å ID –∞–≤—Ç–æ—Ä–∞
    if (authorId) {
      router.push(`/courses/coach-profile/${authorId}`);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const handleSettingsClick = () => {
    if (!workout) return;
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    router.push(`/workouts/create?courseId=${courseId}&workoutId=${workout.course_workout_uuid}`);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const handleSubmitComment = () => {
    if (!newComment.trim() || !user) return;
    
    const newCommentObj: Comment = {
      id: Date.now().toString(),
      authorName: user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      authorAvatar: '',
      text: newComment.trim(),
      date: '—Ç–æ–ª—å–∫–æ —á—Ç–æ',
      likes: 0,
      isLiked: false
    };
    
    setComments([newCommentObj, ...comments]);
    setNewComment('');
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const handleLikeComment = (commentId: string) => {
    setComments(comments.map(comment => {
      if (comment.id === commentId) {
        return {
          ...comment,
          likes: comment.isLiked ? comment.likes - 1 : comment.likes + 1,
          isLiked: !comment.isLiked
        };
      }
      return comment;
    }));
  };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const formatDuration = (seconds: number): string => {
    if (seconds < 60) {
      return `${seconds} —Å–µ–∫`;
    } else if (seconds < 3600) {
      const minutes = Math.floor(seconds / 60);
      return `${minutes} –º–∏–Ω`;
    } else {
      const hours = Math.floor(seconds / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      if (minutes === 0) {
        return `${hours} —á`;
      }
      return `${hours} —á ${minutes} –º–∏–Ω`;
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è iframe —Å –≤–∏–¥–µ–æ
  const renderVideoPlayer = () => {
    if (!workout || !workout.video_url) return null;
    
    // –ü–æ–ª—É—á–∞–µ–º URL –≤–∏–¥–µ–æ
    let videoUrl = workout.video_url;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–∏–¥–µ–æ (YouTube, Vimeo, Rutube –∏–ª–∏ –¥—Ä—É–≥–æ–µ)
    const isYouTube = videoUrl.includes('youtube.com') || videoUrl.includes('youtu.be');
    const isVimeo = videoUrl.includes('vimeo.com');
    const isRutube = videoUrl.includes('rutube.ru');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube
    if (isYouTube) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è YouTube
      if (videoUrl.includes('?')) {
        videoUrl += '&autoplay=1&rel=0';
      } else {
        videoUrl += '?autoplay=1&rel=0';
      }
    } 
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Vimeo
    else if (isVimeo) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Vimeo
      if (videoUrl.includes('?')) {
        videoUrl += '&autoplay=1';
      } else {
        videoUrl += '?autoplay=1';
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Rutube - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –≤ embed —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    else if (isRutube) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ URL "embed" –∏–ª–∏ "play/embed"
      if (!videoUrl.includes('/embed/') && !videoUrl.includes('/play/embed/')) {
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ
        const rutubeIdMatch = videoUrl.match(/\/video\/([a-zA-Z0-9]+)/);
        if (rutubeIdMatch && rutubeIdMatch[1]) {
          // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π embed URL
          videoUrl = `https://rutube.ru/play/embed/${rutubeIdMatch[1]}`;
        }
      }
    }
    
    return (
      <Box 
        sx={{ 
          width: '100%', 
          position: 'relative',
          paddingTop: '56.25%', // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω 16:9
          borderRadius: theme.borderRadius.small,
          overflow: 'hidden',
          boxShadow: theme.customShadows.medium,
          bgcolor: 'black',
          mb: 3,
          '& iframe': {
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            border: 'none',
            zIndex: 1 // –î–æ–±–∞–≤–ª—è–µ–º z-index, —á—Ç–æ–±—ã iframe –±—ã–ª –≤—ã—à–µ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          }
        }}
      >
        <iframe
          src={videoUrl}
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullscreen"
          allowFullScreen
          referrerPolicy="origin"
        />
      </Box>
    );
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
  const toggleDescription = () => {
    setIsDescriptionExpanded(!isDescriptionExpanded);
  };
  
  return (
    <>
      {/* –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
      <SearchBar 
        isSearchBarVisible={isSearchBarVisible} 
        isAtTop={isAtTop} 
        showBackButton={true}
        showProfileButton={false}
        showFilterButton={false}
        showSettingsButton={isOwner}
        showSearchField={false}
        title="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
        onBackClick={handleBackToCourse}
        onSettingsClick={isOwner ? handleSettingsClick : undefined}
      />
      
      <MainLayout>
        <Container maxWidth="xl" sx={{ pb: 6, pt: 7 }}>
          {loading ? (
            <Box sx={{ display: "flex", justifyContent: "center", alignItems: "center", minHeight: "50vh" }}>
              <CircularProgress sx={{ color: theme.palette.highlight?.main }} />
            </Box>
          ) : errorType ? (
            <WorkoutErrorBlock
              type={errorType}
              onViewOtherCourses={handleViewOtherCourses}
              onBackToCourse={handleBackToCourse}
              theme={theme}
            />
          ) : workout ? (
            <Box>
              <Stack direction={{ xs: 'column', md: 'row' }} spacing={3}>
                {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (–≤–∏–¥–µ–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è) */}
                <Box sx={{ flex: 1 }}>
                  {/* –í–∏–¥–µ–æ–ø–ª–µ–µ—Ä */}
                  {renderVideoPlayer()}
                  
                  {/* –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ */}
                  <Typography 
                    variant="h4" 
                    sx={{ 
                      fontWeight: 'bold',
                      mb: 2,
                      fontSize: { xs: '1.5rem', sm: '1.75rem', md: '2rem' }
                    }}
                  >
                    {workout.name}
                  </Typography>
                  
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ */}
                  <Stack 
                    direction={{ xs: 'column', sm: 'row' }} 
                    justifyContent="space-between"
                    alignItems={{ xs: 'flex-start', sm: 'center' }}
                    spacing={2}
                    sx={{ mb: 3 }}
                  >
                    <Stack direction="row" spacing={2} alignItems="center">
                      <Stack direction="row" alignItems="center" spacing={0.5}>
                        <VisibilityIcon 
                          fontSize="small" 
                          sx={{ color: theme.palette.textColors?.secondary }} 
                        />
                        <Typography 
                          variant="body2"
                          color={theme.palette.textColors?.secondary}
                        >
                          {viewCount} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                        </Typography>
                      </Stack>
                      
                      <Stack direction="row" alignItems="center" spacing={0.5}>
                        <CalendarTodayIcon 
                          fontSize="small" 
                          sx={{ color: theme.palette.textColors?.secondary }} 
                        />
                        <Typography 
                          variant="body2"
                          color={theme.palette.textColors?.secondary}
                        >
                          {uploadDate}
                        </Typography>
                      </Stack>
                    </Stack>
                    
                    <Stack direction="row" spacing={1}>
                      {/* –ó–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–æ–≤ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Rating */}
                      <Paper
                        elevation={0}
                        sx={{
                          py: 0.5,
                          px: 1.5,
                          borderRadius: 20,
                          bgcolor: 'rgba(0,0,0,0.2)',
                          border: '1px solid rgba(255,255,255,0.05)',
                        }}
                      >
                        <WorkoutRating
                          workoutId={String(workoutId)}
                          userId={user?.user_id}
                          initialRating={rating}
                          totalRatings={totalRatings}
                          theme={theme}
                        />
                      </Paper>
                    </Stack>
                  </Stack>
                  
                  <Divider sx={{ mb: 3 }} />
                  
                  {/* –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ */}
                  {workout.description && (
                    <Paper
                      elevation={0}
                      sx={{
                        p: 2,
                        mb: 3,
                        borderRadius: theme.borderRadius.small,
                        bgcolor: theme.palette.backgrounds?.paper,
                        boxShadow: theme.customShadows.light
                      }}
                    >
                      <Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ mb: 1 }}>
                        <Typography variant="h6" fontWeight="medium">
                          –û–ø–∏—Å–∞–Ω–∏–µ
                        </Typography>
                        <IconButton
                          onClick={toggleDescription}
                          size="small"
                          sx={{
                            color: theme.palette.highlight?.main,
                            transition: 'transform 0.3s',
                            transform: isDescriptionExpanded ? 'rotate(180deg)' : 'rotate(0deg)'
                          }}
                        >
                          <ExpandMoreIcon />
                        </IconButton>
                      </Stack>
                      
                      <Collapse in={isDescriptionExpanded} timeout="auto" unmountOnExit>
                        <Typography 
                          variant="body2" 
                          color={theme.palette.textColors?.secondary}
                          sx={{ 
                            whiteSpace: 'pre-line',
                            mt: 1
                          }}
                        >
                          {workout.description}
                        </Typography>
                      </Collapse>
                    </Paper>
                  )}
                  
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ */}
                  <Paper 
                    elevation={0}
                    onClick={handleCoachClick}
                    sx={{
                      p: 2,
                      mb: 3,
                      borderRadius: theme.borderRadius.small,
                      bgcolor: theme.palette.backgrounds?.paper,
                      boxShadow: theme.customShadows.medium,
                      cursor: 'pointer',
                      transition: 'all 0.2s ease',
                      '&:hover': {
                        transform: 'translateY(-2px)',
                        boxShadow: theme.customShadows.strong,
                      },
                    }}
                  >
                    <TrainerInfo
                      name={authorName}
                      avatarUrl={authorAvatar}
                      rating={authorRating}
                      description={authorDescription}
                      isLoading={authorLoading}
                      theme={theme}
                      size="large"
                    />
                  </Paper>
                  
                  {/* –°–µ–∫—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ */}
                  <Typography variant="h6" sx={{ mt: 4, mb: 2, fontWeight: 'medium' }}>
                    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ({comments.length})
                  </Typography>
                  
                  {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */}
                  {user && (
                    <Stack 
                      direction="row" 
                      spacing={2} 
                      alignItems="flex-start"
                      sx={{ mb: 3 }}
                    >
                      <Avatar
                        sx={{
                          bgcolor: theme.palette.highlight?.main,
                          width: 40,
                          height: 40
                        }}
                      >
                        {user.first_name?.[0] || 'U'}
                      </Avatar>
                      
                      <TextField
                        fullWidth
                        variant="outlined"
                        placeholder="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
                        value={newComment}
                        onChange={(e) => setNewComment(e.target.value)}
                        multiline
                        maxRows={4}
                        sx={{
                          '& .MuiOutlinedInput-root': {
                            borderRadius: theme.borderRadius.small,
                            bgcolor: 'rgba(255,255,255,0.05)'
                          }
                        }}
                        InputProps={{
                          endAdornment: (
                            <IconButton 
                              onClick={handleSubmitComment}
                              disabled={!newComment.trim()}
                              sx={{ 
                                color: theme.palette.highlight?.main,
                                opacity: !newComment.trim() ? 0.5 : 1
                              }}
                            >
                              <SendIcon />
                            </IconButton>
                          )
                        }}
                      />
                    </Stack>
                  )}
                  
                  {/* –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ */}
                  {commentsLoading ? (
                    <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
                      <CircularProgress size={30} />
                    </Box>
                  ) : comments.length > 0 ? (
                    <List sx={{ p: 0 }}>
                      {comments.map((comment) => (
                        <ListItem 
                          key={comment.id}
                          alignItems="flex-start"
                          sx={{ 
                            px: 0, 
                            py: 2,
                            borderBottom: `1px solid rgba(255,255,255,0.1)`
                          }}
                        >
                          <ListItemAvatar>
                            <Avatar sx={{ bgcolor: theme.palette.highlight?.main }}>
                              {comment.authorName[0]}
                            </Avatar>
                          </ListItemAvatar>
                          
                          <ListItemText
                            primary={
                              <Stack direction="row" justifyContent="space-between" alignItems="center">
                                <Typography variant="subtitle2" fontWeight="bold">
                                  {comment.authorName}
                                </Typography>
                                <Typography 
                                  variant="caption" 
                                  color={theme.palette.textColors?.secondary}
                                >
                                  {comment.date}
                                </Typography>
                              </Stack>
                            }
                            secondary={
                              <Box sx={{ mt: 1 }}>
                                <Typography 
                                  variant="body2" 
                                  sx={{ whiteSpace: 'pre-line', mb: 1 }}
                                >
                                  {comment.text}
                                </Typography>
                                
                                <Button
                                  size="small"
                                  startIcon={comment.isLiked ? <ThumbUpIcon fontSize="small" /> : <ThumbUpOutlinedIcon fontSize="small" />}
                                  onClick={() => handleLikeComment(comment.id)}
                                  sx={{
                                    color: comment.isLiked ? theme.palette.highlight?.main : theme.palette.textColors?.secondary,
                                    py: 0,
                                    minWidth: 0
                                  }}
                                >
                                  {comment.likes}
                                </Button>
                              </Box>
                            }
                          />
                        </ListItem>
                      ))}
                    </List>
                  ) : (
                    <Box 
                      sx={{ 
                        textAlign: 'center',
                        py: 4,
                        color: theme.palette.textColors?.secondary
                      }}
                    >
                      <CommentIcon sx={{ fontSize: 48, opacity: 0.5, mb: 1 }} />
                      <Typography>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!</Typography>
                    </Box>
                  )}
                </Box>
                
                {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏) - —Ç–æ–ª—å–∫–æ –Ω–∞ –±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö */}
                {!isSmallScreen && (
                  <Box sx={{ width: 360, flexShrink: 0 }}>
                    <Typography variant="h6" sx={{ mb: 2, fontWeight: 'medium' }}>
                      –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                    </Typography>
                    
                    <Stack spacing={2}>
                      {/* –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ */}
                      {[1, 2, 3, 4].map((item) => (
                        <Card 
                          key={item}
                          sx={{ 
                            display: 'flex', 
                            borderRadius: theme.borderRadius.small,
                            bgcolor: theme.palette.backgrounds?.paper,
                            boxShadow: theme.customShadows.light,
                            overflow: 'hidden',
                            cursor: 'pointer',
                            '&:hover': {
                              transform: 'translateY(-2px)',
                              boxShadow: theme.customShadows.medium,
                              transition: 'all 0.2s ease'
                            }
                          }}
                          onClick={handleBackToCourse}
                        >
                          <Box 
                            sx={{ 
                              width: 160, 
                              height: 90, 
                              position: 'relative',
                              backgroundImage: 'linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url(/images/workout-placeholder.jpg)',
                              backgroundSize: 'cover',
                              backgroundPosition: 'center',
                              flexShrink: 0
                            }}
                          >
                            <Box 
                              sx={{
                                position: 'absolute',
                                bottom: 4,
                                right: 4,
                                bgcolor: 'rgba(0,0,0,0.7)',
                                color: 'white',
                                fontSize: '0.75rem',
                                py: 0.2,
                                px: 0.5,
                                borderRadius: 0.5
                              }}
                            >
                              {Math.floor(Math.random() * 30) + 5}:00
                            </Box>
                          </Box>
                          
                          <Box sx={{ p: 1.5, flex: 1 }}>
                            <Typography 
                              variant="subtitle2" 
                              sx={{ 
                                fontWeight: 'medium',
                                mb: 0.5,
                                display: '-webkit-box',
                                WebkitLineClamp: 2,
                                WebkitBoxOrient: 'vertical',
                                overflow: 'hidden'
                              }}
                            >
                              –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {item}: {['–ö–∞—Ä–¥–∏–æ', '–°–∏–ª–æ–≤–∞—è', '–†–∞—Å—Ç—è–∂–∫–∞', '–ô–æ–≥–∞'][item % 4]}
                            </Typography>
                            
                            <Typography 
                              variant="caption"
                              color={theme.palette.textColors?.secondary}
                            >
                              {viewCount - (item * 100)} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                            </Typography>
                          </Box>
                        </Card>
                      ))}
                    </Stack>
                  </Box>
                )}
              </Stack>
            </Box>
          ) : (
            <Alert severity="info" sx={{ borderRadius: theme.borderRadius.small }}>
              –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            </Alert>
          )}
        </Container>
      </MainLayout>
    </>
  );
} 